generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model School {
  id               String    @id @default(uuid()) @db.Uuid
  name             String
  domain           String    @unique
  profilePicture   String
  location         String
  SubscriptionType String
  Language         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  classes      Class[]
  users        User[]
  admins       Admin[]
  transport    Transport[]
  libraryBooks LibraryBook[]
  galleries    Gallery[]
  exams        Exam[]
  Student      Student[]

  @@index([name])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

// model User {
//   id        String    @id @db.Uuid // Supabase UUID — do not use default(uuid())
//   schoolId  String    @db.Uuid
//   roleId    Int
//   email     String    @unique
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   Superadmin            Superadmin?
//   school                School            @relation(fields: [schoolId], references: [id])
//   role                  Role              @relation(fields: [roleId], references: [id])
//   student               Student?
//   teacher               TeachingStaff?
//   nonTeachingStaff      NonTeachingStaff?
//   attendance            Attendance[]
//   sentNotifications     Notification[]    @relation("Sender")
//   receivedNotifications Notification[]    @relation("Receiver")
//   Document              Document[]
//   AuditLog              AuditLog[]
//   Admin                 Admin?

//   @@index([schoolId])
//   @@index([roleId])
// }
model User {
  id             String    @id @db.Uuid
  schoolId       String?   @db.Uuid
  roleId         Int // 1 = Superadmin
  email          String    @unique
  name           String?
  profilePicture String    @default("default.png")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  school                School?           @relation(fields: [schoolId], references: [id])
  role                  Role              @relation(fields: [roleId], references: [id])
  student               Student?
  teacher               TeachingStaff?
  nonTeachingStaff      NonTeachingStaff?
  attendance            Attendance[]
  sentNotifications     Notification[]    @relation("Sender")
  receivedNotifications Notification[]    @relation("Receiver")
  Document              Document[]
  AuditLog              AuditLog[]
  Admin                 Admin?

  @@index([schoolId])
  @@index([roleId])
}

model Admin {
  userId   String @id @db.Uuid
  schoolId String @db.Uuid

  school School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Student {
  userId             String               @id @db.Uuid
  classId            Int
  parentId           String?              @db.Uuid
  name               String
  email              String
  dob                String
  gender             String
  admissionDate      String
  sectionId          Int
  section            Section              @relation(fields: [sectionId], references: [id])
  bloodGroup         String
  rollNumber         String
  academicYear       String
  PreviousSchoolName String?
  Status             StudentStatus
  FeeStatus          FeeStatus            @default(PENDING)
  DateOfLeaving      String?
  contactNumber      String
  Address            String
  city               String
  state              String
  country            String
  postalCode         String
  FatherName         String
  MotherName         String
  FatherNumber       String?
  MotherNumber       String?
  GuardianName       String?
  GuardianRelation   String?
  House              String?
  profilePicture     String
  admissionNo        String
  schoolId           String               @db.Uuid
  school             School               @relation(fields: [schoolId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  class              Class                @relation(fields: [classId], references: [id])
  examResults        ExamResult[]
  ExamIssue          ExamIssue[]
  HomeworkSubmission HomeworkSubmission[]
  FeeStructure       FeeStructure[]
  FeePayment         FeePayment[]

  @@index([classId])
  @@index([sectionId])
  @@index([parentId])
}

model ExamSeries {
  id     Int   @id @default(autoincrement())
  examId Int
  score  Float
  exam   Exam  @relation(fields: [examId], references: [id])
}

model ExamIssue {
  id        Int      @id @default(autoincrement())
  studentId String   @db.Uuid
  issueDate DateTime
  student   Student  @relation(fields: [studentId], references: [userId])
}

model Vehicle {
  id     Int         @id @default(autoincrement())
  number String
  routes Transport[]
}

model HomeworkSubmission {
  id             Int      @id @default(autoincrement())
  homeworkId     Int
  studentId      String   @db.Uuid
  submissionDate DateTime

  homework Homework @relation(fields: [homeworkId], references: [id])
  student  Student  @relation(fields: [studentId], references: [userId])
}

model TeachingStaff {
  userId         String  @id @db.Uuid
  departmentId   Int
  employeeId     String
  profilePicture String
  name           String
  designation    String
  gender         String
  age            String
  bloodGroup     String
  contactNumber  String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?

  subjects      Subject[]
  user          User             @relation(fields: [userId], references: [id])
  department    Department       @relation(fields: [departmentId], references: [id])
  homework      Homework[]
  subjectId     Int
  sections      SectionTeacher[]
  classTeachers ClassTeacher[]

  @@index([departmentId])
}

model NonTeachingStaff {
  userId       String @id @db.Uuid
  departmentId Int

  employeeId     String
  profilePicture String
  name           String
  designation    String
  gender         String
  age            String
  bloodGroup     String
  contactNumber  String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?

  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@index([departmentId])
}

model Class {
  id        Int    @id @default(autoincrement())
  schoolId  String @db.Uuid
  className String

  school       School         @relation(fields: [schoolId], references: [id])
  students     Student[]
  subjects     Subject[]
  homework     Homework[]
  sections     Section[] // Renamed: Section → sections
  FeeStructure FeeStructure[]
  ClassTeacher ClassTeacher[]

  // @@unique([schoolId, className]) // "6" must be unique per school
  @@index([schoolId])
}

model Section {
  id              Int              @id @default(autoincrement())
  name            String
  classId         Int
  schoolId        String           @db.Uuid // Optional but helpful for direct filtering
  class           Class            @relation(fields: [classId], references: [id])
  assignedTeacher SectionTeacher[]
  students        Student[]

  @@unique([classId, name])
  @@index([classId])
}

model SectionTeacher {
  id        Int    @id @default(autoincrement())
  sectionId Int
  teacherId String @db.Uuid

  section Section       @relation(fields: [sectionId], references: [id])
  teacher TeachingStaff @relation(fields: [teacherId], references: [userId])

  @@unique([sectionId, teacherId])
  @@index([sectionId])
  @@index([teacherId])
}

model ClassTeacher {
  id        Int    @id @default(autoincrement())
  classId   Int
  teacherId String @db.Uuid

  class   Class         @relation(fields: [classId], references: [id])
  teacher TeachingStaff @relation(fields: [teacherId], references: [userId])

  @@unique([classId, teacherId])
  @@index([classId])
  @@index([teacherId])
}

model Document {
  id          Int          @id @default(autoincrement())
  userId      String       @db.Uuid
  title       String
  description String?
  fileUrl     String
  type        DocumentType @default(OTHER)
  isPublic    Boolean      @default(false)
  uploadedAt  DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model Subject {
  id           Int     @id @default(autoincrement())
  subjectName  String
  subjectCode  String?
  classId      Int
  departmentId Int

  class      Class      @relation(fields: [classId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  homework    Homework[]
  examResults ExamResult[]
  Teacher     TeachingStaff[]

  @@index([classId])
  @@index([departmentId])
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  teachers         TeachingStaff[]
  subjects         Subject[]
  NonTeachingStaff NonTeachingStaff[]
}

model Homework {
  id        Int    @id @default(autoincrement())
  classId   Int
  subjectId Int
  teacherId String @db.Uuid

  class              Class                @relation(fields: [classId], references: [id])
  subject            Subject              @relation(fields: [subjectId], references: [id])
  teacher            TeachingStaff        @relation(fields: [teacherId], references: [userId])
  HomeworkSubmission HomeworkSubmission[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  schoolId  String   @db.Uuid
  title     String
  createdAt DateTime @default(now())

  school     School       @relation(fields: [schoolId], references: [id])
  results    ExamResult[]
  examSeries ExamSeries[]

  @@index([schoolId])
}

model ExamResult {
  id        Int    @id @default(autoincrement())
  examId    Int
  studentId String @db.Uuid
  subjectId Int

  exam    Exam    @relation(fields: [examId], references: [id])
  student Student @relation(fields: [studentId], references: [userId])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([examId, studentId, subjectId])
  @@index([examId])
  @@index([studentId])
  @@index([subjectId])
}

model FeeStructure {
  id        Int      @id @default(autoincrement())
  classId   Int
  studentId String   @db.Uuid
  issueDate DateTime

  class    Class        @relation(fields: [classId], references: [id])
  student  Student      @relation(fields: [studentId], references: [userId])
  payments FeePayment[]
}

model FeePayment {
  id          Int      @id @default(autoincrement())
  studentId   String   @db.Uuid
  structureId Int
  amount      Float
  paymentDate DateTime

  student   Student      @relation(fields: [studentId], references: [userId])
  structure FeeStructure @relation(fields: [structureId], references: [id])
}

model Attendance {
  id     Int      @id @default(autoincrement())
  userId String   @db.Uuid
  date   DateTime
  status String

  user User @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  message    String
  createdAt  DateTime @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  @@index([receiverId])
  @@index([senderId])
}

model Transport {
  id       Int     @id @default(autoincrement())
  schoolId String  @db.Uuid
  route    String?

  school    School   @relation(fields: [schoolId], references: [id])
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?

  @@index([schoolId])
}

model LibraryBook {
  id       Int     @id @default(autoincrement())
  schoolId String  @db.Uuid
  title    String
  author   String?

  school School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model Gallery {
  id       Int    @id @default(autoincrement())
  schoolId String @db.Uuid
  title    String

  school School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    String?     @db.Uuid
  action    AuditAction
  tableName String
  rowId     String
  timestamp DateTime    @default(now())
  oldData   Json?
  newData   Json?
  error     String?

  user User? @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  ERROR
}

enum FeeStatus {
  PAID
  UNPAID
  PENDING
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  LEFT
}

enum DocumentType {
  NOTE
  ASSIGNMENT
  CERTIFICATE
  REPORT
  OTHER
}
