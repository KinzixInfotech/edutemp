generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model School {
  id               String    @id @default(uuid()) @db.Uuid
  name             String
  domain           String    @unique
  schoolCode       String    @unique
  profilePicture   String
  location         String
  contactNumber    String
  SubscriptionType String
  Language         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  classes             Class[]
  users               User[]
  admins              Admin[]
  transport           Transport[]
  libraryBooks        LibraryBook[]
  galleries           Gallery[]
  exams               Exam[]
  Student             Student[]
  MasterAdmin         MasterAdmin?
  TeachingStaff       TeachingStaff[]
  NonTeachingStaff    NonTeachingStaff[]
  AcademicYear        AcademicYear[]
  FeeStructure        FeeStructure[]
  StudentFeeStructure StudentFeeStructure[]
  FeePayment          FeePayment[]
  Notice              Notice[]
  InventoryItem       InventoryItem[]
  Syllabus            Syllabus[]

  @@index([name])
}

model InventoryItem {
  id              String   @id @default(uuid())
  name            String
  category        String
  schoolId        String   @db.Uuid
  description     String?
  quantity        Int
  minimumQuantity Int
  maximumQuantity Int
  unit            String
  purchaseDate    DateTime
  costPerUnit     Float
  vendorName      String
  vendorContact   String
  warrantyPeriod  String?
  location        String
  status          String // e.g., ACTIVE, UNDER_REPAIR, DISPOSED
  barcode         String?
  notes           String?

  transactions   InventoryTransaction[]
  purchaseOrders PurchaseOrderItem[]
  School         School                 @relation(fields: [schoolId], references: [id])
}

model Syllabus {
  id             String        @id @default(uuid())
  academicYearId String?       @db.Uuid
  classId        Int?
  fileUrl        String // URL or path to the uploaded PDF
  uploadedAt     DateTime      @default(now())
  schoolId       String        @db.Uuid
  School         School        @relation(fields: [schoolId], references: [id])
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  Class          Class?        @relation(fields: [classId], references: [id])
}

model InventoryTransaction {
  id              String        @id @default(uuid())
  item            InventoryItem @relation(fields: [itemId], references: [id])
  itemId          String
  transactionType String // e.g., ISSUE, RETURN, ADJUSTMENT, PURCHASE
  quantity        Int
  date            DateTime
  issuedToId      String?
  issuedToName    String?
  handledById     String
  handledByName   String
  remarks         String?
  status          String // e.g., COMPLETED, PENDING, LOST, DAMAGED
}

model PurchaseOrder {
  id               String   @id @default(uuid())
  orderDate        DateTime
  expectedDelivery DateTime
  vendorName       String
  vendorContact    String
  approvedById     String
  approvedByName   String
  status           String // e.g., ORDERED, DELIVERED, CANCELLED

  items PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  item            InventoryItem @relation(fields: [itemId], references: [id])
  itemId          String
  name            String
  quantity        Int
  costPerUnit     Float
}

model Notice {
  id           String         @id @default(uuid()) @db.Uuid
  schoolId     String         @db.Uuid
  title        String
  description  String
  fileUrl      String? // optional file attachment
  audience     Audience       @default(ALL) // enum: target audience
  priority     Priority       @default(NORMAL) // enum: notice importance
  status       Status         @default(DRAFT) // enum: DRAFT, PUBLISHED, ARCHIVED
  publishedAt  DateTime? // optional published date
  expiryDate   DateTime? // optional expiry date
  createdById  String?        @db.Uuid // staff/admin who created
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  category     String? // Must exist and match the enum values
  // Relations
  School       School         @relation(fields: [schoolId], references: [id])
  Author       User?          @relation(fields: [createdById], references: [id])
  NoticeTarget NoticeTarget[]

  @@index([schoolId])
  @@index([status])
  @@index([priority])
  @@index([publishedAt])
  @@index([expiryDate])
}

model NoticeTarget {
  id        String @id @default(uuid()) @db.Uuid
  noticeId  String @db.Uuid
  classId   Int? // optional, for class-specific notice
  sectionId Int? // optional, for section-specific notice

  Notice  Notice   @relation(fields: [noticeId], references: [id])
  Class   Class?   @relation(fields: [classId], references: [id])
  Section Section? @relation(fields: [sectionId], references: [id])

  @@index([noticeId])
  @@index([classId])
  @@index([sectionId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id             String     @id @db.Uuid
  schoolId       String?    @db.Uuid
  roleId         Int
  email          String     @unique
  password       String
  name           String?
  profilePicture String     @default("default.png")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  status         UserStatus @default(ACTIVE)

  // Relations
  school                School?           @relation(fields: [schoolId], references: [id])
  role                  Role              @relation(fields: [roleId], references: [id])
  student               Student?
  teacher               TeachingStaff?
  nonTeachingStaff      NonTeachingStaff?
  attendance            Attendance[]
  sentNotifications     Notification[]    @relation("Sender")
  receivedNotifications Notification[]    @relation("Receiver")
  Document              Document[]
  AuditLog              AuditLog[]
  Admin                 Admin?
  MasterAdmin           MasterAdmin?
  Notice                Notice[]

  @@index([schoolId])
  @@index([roleId])
}

// model AcademicYear {
//   id        String   @id @default(uuid()) @db.Uuid
//   name      String
//   startDate DateTime
//   endDate   DateTime
//   isActive  Boolean  @default(false)
//   createdAt DateTime @default(now())

//   schoolId     String         @db.Uuid
//   school       School         @relation(fields: [schoolId], references: [id])
//   students     Student[]
//   classes      Class[]
//   FeeStructure FeeStructure[]
//   FeePayment   FeePayment[]

//   @@unique([schoolId, name])
//   @@index([schoolId])
// }

model Admin {
  userId   String @id @db.Uuid
  schoolId String @db.Uuid
  school   School @relation(fields: [schoolId], references: [id])
  User     User   @relation(fields: [userId], references: [id])
}

model MasterAdmin {
  userId   String @id @unique @db.Uuid
  schoolId String @unique @db.Uuid //  @unique to enforce one-to-one

  school School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Student {
  userId              String                @id @db.Uuid
  classId             Int
  parentId            String?               @db.Uuid
  name                String
  email               String
  dob                 DateTime
  gender              String
  admissionDate       String
  sectionId           Int
  section             Section               @relation(fields: [sectionId], references: [id])
  bloodGroup          String
  rollNumber          String
  PreviousSchoolName  String?
  FeeStatus           FeeStatus             @default(PENDING)
  DateOfLeaving       String?
  contactNumber       String
  Address             String
  city                String
  state               String
  country             String
  postalCode          String
  FatherName          String
  MotherName          String
  FatherNumber        String?
  MotherNumber        String?
  GuardianName        String?
  GuardianRelation    String?
  House               String?
  admissionNo         String
  schoolId            String                @db.Uuid
  school              School                @relation(fields: [schoolId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  class               Class                 @relation(fields: [classId], references: [id])
  examResults         ExamResult[]
  ExamIssue           ExamIssue[]
  HomeworkSubmission  HomeworkSubmission[]
  FeeStructure        FeeStructure[]
  FeePayment          FeePayment[]
  AcademicYear        AcademicYear?         @relation(fields: [academicYearId], references: [id])
  academicYearId      String?               @db.Uuid
  StudentFeeStructure StudentFeeStructure[]

  @@index([classId])
  @@index([sectionId])
  @@index([parentId])
}

model ExamSeries {
  id     Int   @id @default(autoincrement())
  examId Int
  score  Float
  exam   Exam  @relation(fields: [examId], references: [id])
}

model ExamIssue {
  id        Int      @id @default(autoincrement())
  studentId String   @db.Uuid
  issueDate DateTime
  student   Student  @relation(fields: [studentId], references: [userId])
}

model Vehicle {
  id     Int         @id @default(autoincrement())
  number String
  routes Transport[]
}

model HomeworkSubmission {
  id             Int      @id @default(autoincrement())
  homeworkId     Int
  studentId      String   @db.Uuid
  submissionDate DateTime

  homework Homework @relation(fields: [homeworkId], references: [id])
  student  Student  @relation(fields: [studentId], references: [userId])
}

model TeachingStaff {
  userId         String       @id @db.Uuid
  departmentId   Int?
  employeeId     String
  name           String
  AcademicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.Uuid
  designation    String
  gender         String
  age            String
  bloodGroup     String
  contactNumber  String
  dob            String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?

  school                School                  @relation(fields: [schoolId], references: [id])
  subjects              Subject[]
  user                  User                    @relation(fields: [userId], references: [id])
  department            Department?             @relation(fields: [departmentId], references: [id])
  homework              Homework[]
  subjectId             Int?
  Class                 Class[]
  schoolId              String                  @db.Uuid
  SectionSubjectTeacher SectionSubjectTeacher[]
  Section               Section[]

  @@index([departmentId])
}

model NonTeachingStaff {
  userId       String @id @db.Uuid
  departmentId Int?

  employeeId     String
  AcademicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.Uuid
  name           String
  designation    String
  gender         String
  dob            String
  age            String
  bloodGroup     String
  contactNumber  String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?
  school         School       @relation(fields: [schoolId], references: [id])

  user       User        @relation(fields: [userId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  schoolId   String      @db.Uuid

  @@index([departmentId])
}

// model Class {
//   id        Int    @id @default(autoincrement())
//   schoolId  String @db.Uuid
//   className String
//   capacity  Int

//   school              School         @relation(fields: [schoolId], references: [id])
//   students            Student[]
//   subjects            Subject[]
//   homework            Homework[]
//   sections            Section[]
//   FeeStructure        FeeStructure[]
//   TeachingStaff       TeachingStaff? @relation(fields: [teachingStaffUserId], references: [userId])
//   teachingStaffUserId String?        @db.Uuid
//   AcademicYear        AcademicYear?  @relation(fields: [academicYearId], references: [id])
//   academicYearId      String?

//   @@unique([id, schoolId])
//   @@index([schoolId])
// }
model Class {
  id        Int    @id @default(autoincrement())
  schoolId  String @db.Uuid
  className String
  capacity  Int

  school              School         @relation(fields: [schoolId], references: [id])
  students            Student[]
  subjects            Subject[]
  homework            Homework[]
  sections            Section[]
  FeeStructure        FeeStructure[]
  TeachingStaff       TeachingStaff? @relation(fields: [teachingStaffUserId], references: [userId])
  teachingStaffUserId String?        @db.Uuid
  AcademicYear        AcademicYear?  @relation(fields: [academicYearId], references: [id])
  academicYearId      String?        @db.Uuid // ✅ fixed
  NoticeTarget        NoticeTarget[]
  Syllabi             Syllabus[]

  @@unique([id, schoolId])
  @@index([schoolId])
}

model Section {
  id                  Int            @id @default(autoincrement())
  name                String
  classId             Int
  schoolId            String         @db.Uuid
  teachingStaffUserId String?        @db.Uuid // Section Supervisor
  supervisor          TeachingStaff? @relation(fields: [teachingStaffUserId], references: [userId])

  class           Class                   @relation(fields: [classId], references: [id])
  students        Student[]
  timetables      Timetable[]
  subjectTeachers SectionSubjectTeacher[]
  NoticeTarget    NoticeTarget[]

  @@unique([classId, name])
  @@index([classId])
}

model SectionSubjectTeacher {
  id                  Int    @id @default(autoincrement())
  sectionId           Int
  subjectId           Int
  teachingStaffUserId String @db.Uuid

  section Section       @relation(fields: [sectionId], references: [id])
  subject Subject       @relation(fields: [subjectId], references: [id])
  teacher TeachingStaff @relation(fields: [teachingStaffUserId], references: [userId])

  @@unique([sectionId, subjectId])
}

model Timetable {
  id        String  @id @default(uuid()) @db.Uuid
  sectionId Int
  day       String
  period    Int
  subject   String
  teacher   String?

  section Section @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model SectionTeacher {
//   id        Int    @id @default(autoincrement())
//   sectionId Int
//   teacherId String @db.Uuid

//   section Section       @relation(fields: [sectionId], references: [id])
//   // teacher TeachingStaff @relation(fields: [teacherId], references: [userId])

//   @@unique([sectionId, teacherId])
//   @@index([sectionId])
//   @@index([teacherId])
// }

// model ClassTeacher {
//   id        Int    @id @default(autoincrement())
//   classId   Int
//   teacherId String @db.Uuid

//   class   Class         @relation(fields: [classId], references: [id])
//   teacher TeachingStaff @relation(fields: [teacherId], references: [userId])

//   @@unique([classId, teacherId])
//   @@index([classId])
//   @@index([teacherId])
// }

model Document {
  id          Int          @id @default(autoincrement())
  userId      String       @db.Uuid
  title       String
  description String?
  fileUrl     String
  type        DocumentType @default(OTHER)
  isPublic    Boolean      @default(false)
  uploadedAt  DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model Subject {
  id           Int     @id @default(autoincrement())
  subjectName  String
  subjectCode  String?
  classId      Int
  departmentId Int

  class      Class      @relation(fields: [classId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  homework              Homework[]
  examResults           ExamResult[]
  Teacher               TeachingStaff[]
  SectionSubjectTeacher SectionSubjectTeacher[]

  @@index([classId])
  @@index([departmentId])
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  teachers         TeachingStaff[]
  subjects         Subject[]
  NonTeachingStaff NonTeachingStaff[]
}

model Homework {
  id        Int    @id @default(autoincrement())
  classId   Int
  subjectId Int
  teacherId String @db.Uuid

  class              Class                @relation(fields: [classId], references: [id])
  subject            Subject              @relation(fields: [subjectId], references: [id])
  teacher            TeachingStaff        @relation(fields: [teacherId], references: [userId])
  HomeworkSubmission HomeworkSubmission[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  schoolId  String   @db.Uuid
  title     String
  createdAt DateTime @default(now())

  school     School       @relation(fields: [schoolId], references: [id])
  results    ExamResult[]
  examSeries ExamSeries[]

  @@index([schoolId])
}

model ExamResult {
  id        Int    @id @default(autoincrement())
  examId    Int
  studentId String @db.Uuid
  subjectId Int

  exam    Exam    @relation(fields: [examId], references: [id])
  student Student @relation(fields: [studentId], references: [userId])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([examId, studentId, subjectId])
  @@index([examId])
  @@index([studentId])
  @@index([subjectId])
}

// model FeeStructure {
//   id             String   @id @default(uuid()) @db.Uuid
//   schoolId       String   @db.Uuid
//   academicYearId String   @db.Uuid
//   classId        Int?
//   studentId      String?  @db.Uuid
//   issueDate      DateTime
//   mode           FeeMode
//   name           String
//   amount         Float

//   // relations
//   school       School       @relation(fields: [schoolId], references: [id])
//   academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
//   class        Class?       @relation(fields: [classId], references: [id])
//   student      Student?     @relation(fields: [studentId], references: [userId])

//   studentFeeStructures StudentFeeStructure[]
//   payments             FeePayment[]

//   @@index([schoolId])
//   @@index([academicYearId])
//   @@index([classId])
//   @@index([studentId])
// }

// model StudentFeeStructure {
//   id             String @id @default(uuid()) @db.Uuid
//   schoolId       String @db.Uuid
//   feeStructureId String @db.Uuid
//   studentId      String @db.Uuid
//   customAmount   Float?

//   // relations
//   school       School       @relation(fields: [schoolId], references: [id])
//   feeStructure FeeStructure @relation(fields: [feeStructureId], references: [id])
//   student      Student      @relation(fields: [studentId], references: [userId])
//   payments     FeePayment[]

//   @@index([schoolId])
//   @@index([feeStructureId])
//   @@index([studentId])
// }

model AcademicYear {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean            @default(false)
  createdAt        DateTime           @default(now())
  schoolId         String             @db.Uuid
  school           School             @relation(fields: [schoolId], references: [id])
  students         Student[]
  classes          Class[]
  FeeStructures    FeeStructure[]
  FeePayments      FeePayment[]
  TeachingStaff    TeachingStaff[]
  NonTeachingStaff NonTeachingStaff[]
  Syllabus         Syllabus[]

  @@unique([schoolId, name])
  @@index([schoolId])
}

model FeeStructure {
  id                  String                @id @default(uuid()) @db.Uuid
  schoolId            String?               @db.Uuid
  academicYearId      String                @db.Uuid
  issueDate           DateTime              @default(now())
  isInstallment       Boolean               @default(false) // false = fixed, true = has installments
  name                String
  mode                FeeMode               @default(MONTHLY) // <-- enum used here
  feeParticulars      FeeParticular[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  Student             Student?              @relation(fields: [studentUserId], references: [userId])
  studentUserId       String?               @db.Uuid
  Class               Class?                @relation(fields: [classId], references: [id])
  classId             Int?
  FeePayments         FeePayment[]
  School              School?               @relation(fields: [schoolId], references: [id])
  AcademicYear        AcademicYear          @relation(fields: [academicYearId], references: [id])
  StudentFeeStructure StudentFeeStructure[]
}

model FeeParticular {
  id                   String                 @id @default(uuid()) @db.Uuid
  feeStructureId       String                 @db.Uuid
  name                 String
  defaultAmount        Float
  feeStructure         FeeStructure           @relation(fields: [feeStructureId], references: [id])
  StudentFeeParticular StudentFeeParticular[]
}

//model used for custom fee assign
model StudentFeeStructure {
  id             String  @id @default(uuid()) @db.Uuid
  studentId      String  @db.Uuid
  academicYearId String  @db.Uuid
  schoolId       String? @db.Uuid
  studentUserId  String? @db.Uuid

  // 🔹 Relation to FeeStructure
  feeStructureId String       @db.Uuid
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
  status         String       @default("UNPAID") // overall status: UNPAID / PARTIAL / PAID

  feeParticulars StudentFeeParticular[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
  School         School?                @relation(fields: [schoolId], references: [id])
  Student        Student?               @relation(fields: [studentUserId], references: [userId])
  FeePayments    FeePayment[]
}

model StudentFeeParticular {
  id                    String                  @id @default(uuid()) @db.Uuid
  studentFeeStructureId String                  @db.Uuid
  globalParticularId    String                  @db.Uuid
  amount                Float?
  // status                String                  @default("unpaid")
  studentFeeStructure   StudentFeeStructure     @relation(fields: [studentFeeStructureId], references: [id])
  globalParticular      FeeParticular           @relation(fields: [globalParticularId], references: [id])
  StudentFeeInstallment StudentFeeInstallment[]
}

model FeePayment {
  id                    String   @id @default(uuid()) @db.Uuid
  schoolId              String   @db.Uuid
  academicYearId        String   @db.Uuid
  studentId             String   @db.Uuid
  feeStructureId        String?  @db.Uuid
  studentFeeStructureId String?  @db.Uuid
  amount                Float
  paymentDate           DateTime @default(now())
  paymentMode           String

  school              School               @relation(fields: [schoolId], references: [id])
  academicYear        AcademicYear         @relation(fields: [academicYearId], references: [id])
  student             Student              @relation(fields: [studentId], references: [userId])
  feeStructure        FeeStructure?        @relation(fields: [feeStructureId], references: [id])
  studentFeeStructure StudentFeeStructure? @relation(fields: [studentFeeStructureId], references: [id])

  @@index([schoolId])
  @@index([academicYearId])
  @@index([studentId])
  @@index([feeStructureId])
  @@index([studentFeeStructureId])
}

model StudentFeeInstallment {
  id                     String   @id @default(uuid()) @db.Uuid
  studentFeeParticularId String   @db.Uuid
  dueDate                DateTime
  amount                 Float
  status                 String   @default("UNPAID") // UNPAID / PAID / PARTIAL
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt

  studentFeeParticular StudentFeeParticular @relation(fields: [studentFeeParticularId], references: [id])

  @@index([studentFeeParticularId])
}

model Attendance {
  id     Int              @id @default(autoincrement())
  userId String           @db.Uuid
  date   DateTime
  status AttendanceStatus

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  message    String
  createdAt  DateTime @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  @@index([receiverId])
  @@index([senderId])
}

model Transport {
  id       Int     @id @default(autoincrement())
  schoolId String  @db.Uuid
  route    String?

  school    School   @relation(fields: [schoolId], references: [id])
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?

  @@index([schoolId])
}

model LibraryBook {
  id       Int     @id @default(autoincrement())
  schoolId String  @db.Uuid
  title    String
  author   String?

  school School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model Gallery {
  id       Int    @id @default(autoincrement())
  schoolId String @db.Uuid
  title    String

  school School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    String?     @db.Uuid
  action    AuditAction
  tableName String
  rowId     String
  timestamp DateTime    @default(now())
  oldData   Json?
  newData   Json?
  error     String?

  user User? @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  ERROR
}

enum FeeStatus {
  PAID
  UNPAID
  PARTIAL
  PENDING
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LEFT
  DISABLED
  BANNED
}

enum DocumentType {
  NOTE
  ASSIGNMENT
  CERTIFICATE
  REPORT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HOLIDAY
}

enum FeeMode {
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
}

enum Audience {
  ALL // all students, staff, parents
  STUDENTS
  TEACHERS
  PARENTS
  CLASS // if you want to assign to specific class
  SECTION // if you want to assign to a specific section
}

enum Priority {
  NORMAL
  IMPORTANT
  URGENT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}
