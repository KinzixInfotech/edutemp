generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MASTERADMIN
  DIRECTOR
  ADMIN
  TEACHING_STAFF
  STUDENT
  PARENT
  NON_TEACHING_STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  LEAVE
}

enum FeeStatus {
  PAID
  PENDING
  OVERDUE
}

model School {
  id               String   @id @default(cuid())
  name             String
  address          String
  email            String   @unique
  phone            String
  logoUrl          String?
  subscriptionType String
  language         String
  currentDomain    String?
  customDomain     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  students Student[]
  teachers Teacher[]
  staff    Staff[]
  classes  Class[]
  admins   Admin[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role // Role must match related model: TEACHING_STAFF → Teacher, NON_TEACHING_STAFF → Staff
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  teacher Teacher?
  parent  Parent?
  staff   Staff?
  admin   Admin?
}

model Admin {
  id       String @id @default(cuid())
  userId   String @unique
  schoolId String
  user     User   @relation(fields: [userId], references: [id])
  school   School @relation(fields: [schoolId], references: [id])
}

model Parent {
  id       String    @id @default(cuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
  students Student[]
}

model Staff {
  id          String             @id @default(cuid())
  userId      String             @unique
  schoolId    String
  name        String
  designation String
  department  String
  gender      Gender
  contact     String
  address     String
  user        User               @relation(fields: [userId], references: [id]) // Role = NON_TEACHING_STAFF
  school      School             @relation(fields: [schoolId], references: [id])
  documents   EmployeeDocument[]
}

model Teacher {
  id          String             @id @default(cuid())
  userId      String             @unique
  employeeId  String             @unique
  schoolId    String
  department  String
  designation String
  gender      Gender
  user        User               @relation(fields: [userId], references: [id]) // Role = TEACHING_STAFF
  school      School             @relation(fields: [schoolId], references: [id])
  subjects    Subject[]
  classes     Class[]
  documents   EmployeeDocument[]
}

model Student {
  id                 String  @id @default(cuid())
  userId             String  @unique
  admissionNo        String  @unique
  studentName        String
  studentpfp         String?
  classId            String
  session            String
  adhaarNo           String?
  fatherName         String
  motherName         String
  fatherMobileNumber String?
  motherMobileNumber String?
  guardianName       String?
  guardianRelation   String?
  guardianMobileNo   String?

  dob        DateTime
  gender     Gender
  parentId   String?
  address    String
  bloodGroup String?
  schoolId   String

  user                 User                  @relation(fields: [userId], references: [id])
  class                Class?                @relation(fields: [classId], references: [id])
  parent               Parent?               @relation(fields: [parentId], references: [id])
  school               School                @relation(fields: [schoolId], references: [id])
  attendance           Attendance[]
  grades               Grade[]
  feePayments          FeePayment[]
  documents            StudentDocument[]
  transportAssignments TransportAssignment[]

  LibraryBook LibraryBook[]
}

model StudentDocument {
  id         String   @id @default(cuid())
  studentId  String
  title      String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])
}

model EmployeeDocument {
  id         String   @id @default(cuid())
  title      String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())

  teacherId String?
  staffId   String?

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  staff   Staff?   @relation(fields: [staffId], references: [id])
}

model Class {
  id        String  @id @default(cuid())
  name      String
  section   String
  teacherId String?
  schoolId  String

  students  Student[]
  timetable Timetable[]
  exams     Exam[]
  teacher   Teacher?    @relation(fields: [teacherId], references: [id])
  school    School      @relation(fields: [schoolId], references: [id])
}

model Subject {
  id        String      @id @default(cuid())
  name      String
  code      String
  teacherId String
  teacher   Teacher     @relation(fields: [teacherId], references: [id])
  timetable Timetable[]
}

model Timetable {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  day       String
  startTime DateTime
  endTime   DateTime
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model Attendance {
  id        String           @id @default(cuid())
  studentId String
  date      DateTime
  status    AttendanceStatus
  student   Student          @relation(fields: [studentId], references: [id])
}

model Exam {
  id      String   @id @default(cuid())
  name    String
  classId String
  date    DateTime
  class   Class    @relation(fields: [classId], references: [id])
  grades  Grade[]
}

model Grade {
  id        String  @id @default(cuid())
  studentId String
  examId    String
  subject   String
  marks     Float
  student   Student @relation(fields: [studentId], references: [id])
  exam      Exam    @relation(fields: [examId], references: [id])
}

model FeePayment {
  id        String    @id @default(cuid())
  studentId String
  amount    Float
  status    FeeStatus
  dueDate   DateTime
  paidDate  DateTime?
  student   Student   @relation(fields: [studentId], references: [id])
}

model LibraryBook {
  id          String    @id @default(cuid())
  title       String
  author      String
  isbn        String
  category    String
  isAvailable Boolean   @default(true)
  issuedToId  String?
  issuedTo    Student?  @relation(fields: [issuedToId], references: [id])
  issuedDate  DateTime?
  dueDate     DateTime?
}

model TransportRoute {
  id        String                @id @default(cuid())
  routeName String
  driver    String
  busNumber String
  students  TransportAssignment[]
}

model TransportAssignment {
  id        String         @id @default(cuid())
  studentId String
  routeId   String
  stopName  String
  student   Student        @relation(fields: [studentId], references: [id])
  route     TransportRoute @relation(fields: [routeId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  createdBy   String
}

model Notification {
  id      String   @id @default(cuid())
  title   String
  message String
  date    DateTime
  target  Role
}
