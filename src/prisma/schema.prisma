generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model School {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String
  domain               String                 @unique
  schoolCode           String                 @unique
  profilePicture       String
  location             String
  contactNumber        String
  SubscriptionType     String
  Language             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  AcademicYear         AcademicYear[]
  admins               Admin[]
  classes              Class[]
  exams                Exam[]
  FeePayment           FeePayment[]
  FeeStructure         FeeStructure[]
  galleries            Gallery[]
  InventoryItem        InventoryItem[]
  libraryBooks         LibraryBook[]
  MasterAdmin          MasterAdmin?
  NonTeachingStaff     NonTeachingStaff[]
  Notice               Notice[]
  Student              Student[]
  StudentFeeStructure  StudentFeeStructure[]
  Syllabus             Syllabus[]
  TeachingStaff        TeachingStaff[]
  // Transport           Transport[]
  users                User[]
  Vehicle              Vehicle[]
  Route                Route[]
  Assignment           Assignment[]
  AdmissionForm        AdmissionForm[]
  Application          Application[]
  Stage                Stage[]
  Upload               Upload[]
  CertificateTemplate  CertificateTemplate[]
  CertificateGenerated CertificateGenerated[]
  DigitalIdCard        DigitalIdCard[]
  AdmitCard            AdmitCard[]

  @@index([name])
}

// admission module
model AdmissionForm {
  id           String        @id @default(uuid()) @db.Uuid
  schoolId     String        @db.Uuid
  name         String
  description  String?
  slug         String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  school       School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  fields       FormField[]
  applications Application[]

  @@index([schoolId])
  @@index([slug])
}

model FormField {
  id              String        @id @default(uuid()) @db.Uuid
  admissionFormId String        @db.Uuid
  name            String
  type            String // e.g., "text", "email", "file", "select"
  required        Boolean       @default(false)
  options         Json? // for select fields
  order           Int
  admissionForm   AdmissionForm @relation(fields: [admissionFormId], references: [id], onDelete: Cascade)

  @@index([admissionFormId])
}

// model Application {
//   id              String                @id @default(uuid()) @db.Uuid
//   schoolId        String                @db.Uuid
//   admissionFormId String                @db.Uuid
//   applicantName   String
//   applicantEmail  String
//   data            Json // submitted form data
//   submittedAt     DateTime              @default(now())
//   currentStageId  String                @db.Uuid
//   createdById     String?               @db.Uuid // optional user who submitted
//   school          School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
//   admissionForm   AdmissionForm         @relation(fields: [admissionFormId], references: [id], onDelete: Cascade)
//   currentStage    Stage                 @relation("CurrentStage", fields: [currentStageId], references: [id])
//   createdBy       User?                 @relation(fields: [createdById], references: [id])
//   documents       ApplicationDocument[]
//   stageHistory    StageHistory[]
//   payments        Payment[]

//   @@index([schoolId])
//   @@index([admissionFormId])
//   @@index([currentStageId])
//   @@index([submittedAt])
//   @@index([applicantEmail])
// }
model Application {
  id              String   @id @default(uuid()) @db.Uuid
  schoolId        String   @db.Uuid
  admissionFormId String   @db.Uuid
  applicantName   String
  applicantEmail  String
  data            Json
  submittedAt     DateTime @default(now())
  currentStageId  String   @db.Uuid
  createdById     String?  @db.Uuid

  school        School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  admissionForm AdmissionForm         @relation(fields: [admissionFormId], references: [id], onDelete: Cascade)
  currentStage  Stage                 @relation("CurrentStage", fields: [currentStageId], references: [id])
  createdBy     User?                 @relation(fields: [createdById], references: [id])
  documents     ApplicationDocument[]
  stageHistory  StageHistory[]
  payments      Payment[]

  @@unique([schoolId, admissionFormId, applicantEmail])
}

model ApplicationDocument {
  id            String      @id @default(uuid()) @db.Uuid
  applicationId String      @db.Uuid
  fileUrl       String
  fileName      String
  mimeType      String
  size          Int
  uploadedAt    DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

model Stage {
  id                  String         @id @default(uuid()) @db.Uuid
  name                StageName      @unique
  order               Int            @unique
  requiresTest        Boolean        @default(false)
  requiresInterview   Boolean        @default(false)
  feeRequired         Boolean        @default(false)
  currentApplications Application[]  @relation("CurrentStage")
  stageHistory        StageHistory[]
  School              School?        @relation(fields: [schoolId], references: [id])
  schoolId            String?        @db.Uuid
}

// model StageHistory {
//   id            String      @id @default(uuid()) @db.Uuid
//   applicationId String      @db.Uuid
//   stageId       String      @db.Uuid
//   movedById     String?     @db.Uuid // Made optional for system/public actions
//   movedAt       DateTime    @default(now())
//   notes         String?
//   application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
//   stage         Stage       @relation(fields: [stageId], references: [id])
//   movedBy       User?       @relation(fields: [movedById], references: [id])

//   @@index([applicationId])
//   @@index([movedAt])
// }
model StageHistory {
  id            String   @id @default(uuid()) @db.Uuid
  applicationId String   @db.Uuid
  stageId       String   @db.Uuid
  movedById     String?  @db.Uuid
  movedAt       DateTime @default(now())
  notes         String?

  // Stage-specific fields
  testPassed    Boolean?
  testScore     Float?
  testDate      DateTime?
  interviewDate DateTime?
  testStartTime DateTime?
  testEndTime   DateTime?
  testVenue     String?

  interviewNotes String?

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  stage       Stage       @relation(fields: [stageId], references: [id])
  movedBy     User?       @relation(fields: [movedById], references: [id])

  @@index([applicationId])
  @@index([movedAt])
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  applicationId String?       @db.Uuid
  amount        Float
  status        PaymentStatus @default(PENDING)
  transactionId String?
  paidAt        DateTime?
  application   Application?  @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([status])
}

// Note: Use PostgreSQL provider as in current schema.
// Transport Models
model Vehicle {
  id             String            @id @default(uuid()) @db.Uuid
  schoolId       String            @db.Uuid
  licensePlate   String            @unique
  model          String
  capacity       Int
  maintenanceDue DateTime?
  status         String // e.g., "active", "maintenance", "inactive"
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  school         School            @relation(fields: [schoolId], references: [id])
  routes         Route[]
  locations      VehicleLocation[]

  @@index([schoolId])
  @@index([licensePlate])
}

model Route {
  id                 String                   @id @default(uuid()) @db.Uuid
  schoolId           String                   @db.Uuid
  name               String
  stops              Json // Array of {name: string, lat: float, lng: float}
  assignedVehicleId  String?                  @db.Uuid
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  school             School                   @relation(fields: [schoolId], references: [id])
  vehicle            Vehicle?                 @relation(fields: [assignedVehicleId], references: [id])
  studentAssignments StudentRouteAssignment[]

  @@index([schoolId])
  @@index([name])
}

model StudentRouteAssignment {
  id         String   @id @default(uuid()) @db.Uuid
  studentId  String   @db.Uuid
  routeId    String   @db.Uuid
  schoolId   String   @db.Uuid
  assignedAt DateTime @default(now())
  student    Student  @relation(fields: [studentId], references: [userId])
  route      Route    @relation(fields: [routeId], references: [id])

  @@index([studentId])
  @@index([routeId])
}

model VehicleLocation {
  id        String   @id @default(uuid()) @db.Uuid
  vehicleId String   @db.Uuid
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
  @@index([timestamp])
}

model Assignment {
  id          String   @id @default(uuid()) @db.Uuid
  schoolId    String   @db.Uuid
  classId     Int
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  school      School   @relation(fields: [schoolId], references: [id])
  class       Class    @relation(fields: [classId], references: [id])

  @@index([schoolId])
  @@index([classId])
  @@index([dueDate])
}

model InventoryItem {
  id              String                 @id @default(uuid())
  name            String
  category        String
  schoolId        String                 @db.Uuid
  description     String?
  quantity        Int
  minimumQuantity Int
  maximumQuantity Int
  unit            String
  purchaseDate    DateTime
  costPerUnit     Float
  vendorName      String
  vendorContact   String
  warrantyPeriod  String?
  location        String
  status          String
  barcode         String?
  notes           String?
  School          School                 @relation(fields: [schoolId], references: [id])
  transactions    InventoryTransaction[]
  purchaseOrders  PurchaseOrderItem[]
}

model Syllabus {
  id             String        @id @default(uuid())
  academicYearId String?       @db.Uuid
  fileUrl        String
  uploadedAt     DateTime      @default(now())
  schoolId       String        @db.Uuid
  classId        Int?
  AcademicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  Class          Class?        @relation(fields: [classId], references: [id])
  School         School        @relation(fields: [schoolId], references: [id])
}

model InventoryTransaction {
  id              String        @id @default(uuid())
  itemId          String
  transactionType String
  quantity        Int
  date            DateTime
  issuedToId      String?
  issuedToName    String?
  handledById     String
  handledByName   String
  remarks         String?
  status          String
  item            InventoryItem @relation(fields: [itemId], references: [id])
}

model PurchaseOrder {
  id               String              @id @default(uuid())
  orderDate        DateTime
  expectedDelivery DateTime
  vendorName       String
  vendorContact    String
  approvedById     String
  approvedByName   String
  status           String
  items            PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())
  purchaseOrderId String
  itemId          String
  name            String
  quantity        Int
  costPerUnit     Float
  item            InventoryItem @relation(fields: [itemId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Notice {
  id           String         @id @default(uuid()) @db.Uuid
  schoolId     String         @db.Uuid
  title        String
  description  String
  fileUrl      String?
  audience     Audience       @default(ALL)
  priority     Priority       @default(NORMAL)
  status       Status         @default(DRAFT)
  publishedAt  DateTime?
  expiryDate   DateTime?
  createdById  String?        @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  category     String?
  Author       User?          @relation(fields: [createdById], references: [id])
  School       School         @relation(fields: [schoolId], references: [id])
  NoticeTarget NoticeTarget[]

  @@index([schoolId])
  @@index([status])
  @@index([priority])
  @@index([publishedAt])
  @@index([expiryDate])
}

model NoticeTarget {
  id        String   @id @default(uuid()) @db.Uuid
  noticeId  String   @db.Uuid
  classId   Int?
  sectionId Int?
  Class     Class?   @relation(fields: [classId], references: [id])
  Notice    Notice   @relation(fields: [noticeId], references: [id])
  Section   Section? @relation(fields: [sectionId], references: [id])

  @@index([noticeId])
  @@index([classId])
  @@index([sectionId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id                    String                 @id @db.Uuid
  schoolId              String?                @db.Uuid
  roleId                Int
  email                 String                 @unique
  password              String
  name                  String?
  profilePicture        String                 @default("default.png")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  status                UserStatus             @default(ACTIVE)
  Admin                 Admin?
  attendance            Attendance[]
  AuditLog              AuditLog[]
  Document              Document[]
  issuedBooks           LibraryBook[]          @relation("IssuedBooks")
  reservedBooks         LibraryBook[]          @relation("ReservedBooks")
  MasterAdmin           MasterAdmin?
  nonTeachingStaff      NonTeachingStaff?
  Notice                Notice[]
  receivedNotifications Notification[]         @relation("Receiver")
  sentNotifications     Notification[]         @relation("Sender")
  student               Student?
  teacher               TeachingStaff?
  role                  Role                   @relation(fields: [roleId], references: [id])
  school                School?                @relation(fields: [schoolId], references: [id])
  Application           Application[]
  StageHistory          StageHistory[]
  GmailAccount          GmailAccount[]
  CertificateTemplate   CertificateTemplate[]
  CertificateGenerated  CertificateGenerated[]

  @@index([schoolId])
  @@index([roleId])
}

// model GmailAccount {
//   id           String   @id @default(uuid())
//   userId       String   @db.Uuid
//   email        String
//   accessToken  String
//   refreshToken String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])

//   @@unique([userId, email]) // A user can’t have duplicate Gmail accounts
// }
model GmailAccount {
  id           String   @id @default(uuid())
  userId       String   @db.Uuid
  email        String
  accessToken  String
  refreshToken String
  name         String? // Optional: for display name
  avatar       String? // Optional: for avatar URL
  lastUsedAt   DateTime @default(now()) // NEW: Track last usage
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, email])
}

model Admin {
  userId   String @id @db.Uuid
  schoolId String @db.Uuid
  school   School @relation(fields: [schoolId], references: [id])
  User     User   @relation(fields: [userId], references: [id])
}

model MasterAdmin {
  userId   String @id @unique @db.Uuid
  schoolId String @unique @db.Uuid
  school   School @relation(fields: [schoolId], references: [id])
  User     User   @relation(fields: [userId], references: [id])
}

model Student {
  userId                 String                   @id @db.Uuid
  classId                Int
  parentId               String?                  @db.Uuid
  name                   String
  email                  String
  dob                    String
  gender                 String
  admissionDate          String
  sectionId              Int
  bloodGroup             String
  rollNumber             String
  PreviousSchoolName     String?
  FeeStatus              FeeStatus                @default(PENDING)
  DateOfLeaving          String?
  contactNumber          String
  Address                String
  city                   String
  state                  String
  country                String
  postalCode             String
  FatherName             String
  MotherName             String
  FatherNumber           String?
  MotherNumber           String?
  GuardianName           String?
  GuardianRelation       String?
  House                  String?
  admissionNo            String
  schoolId               String                   @db.Uuid
  academicYearId         String?                  @db.Uuid
  ExamIssue              ExamIssue[]
  examResults            ExamResult[]
  FeePayment             FeePayment[]
  FeeStructure           FeeStructure[]
  HomeworkSubmission     HomeworkSubmission[]
  AcademicYear           AcademicYear?            @relation(fields: [academicYearId], references: [id])
  class                  Class                    @relation(fields: [classId], references: [id])
  school                 School                   @relation(fields: [schoolId], references: [id])
  section                Section                  @relation(fields: [sectionId], references: [id])
  user                   User                     @relation(fields: [userId], references: [id])
  StudentFeeStructure    StudentFeeStructure[]
  StudentRouteAssignment StudentRouteAssignment[]
  CertificateGenerated   CertificateGenerated[]
  DigitalIdCard          DigitalIdCard[]
  AdmitCard              AdmitCard[]

  @@index([classId])
  @@index([sectionId])
  @@index([parentId])
}

model ExamSeries {
  id     Int   @id @default(autoincrement())
  examId Int
  score  Float
  exam   Exam  @relation(fields: [examId], references: [id])
}

model ExamIssue {
  id        Int      @id @default(autoincrement())
  studentId String   @db.Uuid
  issueDate DateTime
  student   Student  @relation(fields: [studentId], references: [userId])
}

model HomeworkSubmission {
  id             Int      @id @default(autoincrement())
  homeworkId     Int
  studentId      String   @db.Uuid
  submissionDate DateTime
  homework       Homework @relation(fields: [homeworkId], references: [id])
  student        Student  @relation(fields: [studentId], references: [userId])
}

model TeachingStaff {
  userId                String                  @id @db.Uuid
  departmentId          Int?
  employeeId            String
  name                  String
  designation           String
  gender                String
  age                   String
  bloodGroup            String
  contactNumber         String
  dob                   String
  email                 String
  address               String
  City                  String
  district              String?
  state                 String?
  country               String?
  PostalCode            String?
  subjectId             Int?
  schoolId              String                  @db.Uuid
  academicYearId        String                  @db.Uuid
  Class                 Class[]
  homework              Homework[]
  Section               Section[]
  SectionSubjectTeacher SectionSubjectTeacher[]
  AcademicYear          AcademicYear            @relation(fields: [academicYearId], references: [id])
  department            Department?             @relation(fields: [departmentId], references: [id])
  school                School                  @relation(fields: [schoolId], references: [id])
  user                  User                    @relation(fields: [userId], references: [id])
  subjects              Subject[]               @relation("SubjectToTeachingStaff")

  @@index([departmentId])
}

model NonTeachingStaff {
  userId         String       @id @db.Uuid
  departmentId   Int?
  employeeId     String
  name           String
  designation    String
  gender         String
  dob            String
  age            String
  bloodGroup     String
  contactNumber  String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?
  schoolId       String       @db.Uuid
  academicYearId String       @db.Uuid
  AcademicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  department     Department?  @relation(fields: [departmentId], references: [id])
  school         School       @relation(fields: [schoolId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([departmentId])
}

model Class {
  id                  Int            @id @default(autoincrement())
  schoolId            String         @db.Uuid
  className           String
  capacity            Int?
  teachingStaffUserId String?        @db.Uuid
  academicYearId      String?        @db.Uuid
  AcademicYear        AcademicYear?  @relation(fields: [academicYearId], references: [id])
  school              School         @relation(fields: [schoolId], references: [id])
  TeachingStaff       TeachingStaff? @relation(fields: [teachingStaffUserId], references: [userId])
  FeeStructure        FeeStructure[]
  homework            Homework[]
  NoticeTarget        NoticeTarget[]
  sections            Section[]
  students            Student[]
  subjects            Subject[]
  Syllabi             Syllabus[]
  Assignment          Assignment[]

  @@unique([id, schoolId])
  @@index([schoolId])
}

model Section {
  id                  Int                     @id @default(autoincrement())
  name                String
  classId             Int
  schoolId            String                  @db.Uuid
  teachingStaffUserId String?                 @db.Uuid
  NoticeTarget        NoticeTarget[]
  class               Class                   @relation(fields: [classId], references: [id])
  supervisor          TeachingStaff?          @relation(fields: [teachingStaffUserId], references: [userId])
  subjectTeachers     SectionSubjectTeacher[]
  students            Student[]
  timetables          Timetable[]

  @@unique([classId, name])
  @@index([classId])
}

model SectionSubjectTeacher {
  id                  Int           @id @default(autoincrement())
  sectionId           Int
  subjectId           Int
  teachingStaffUserId String        @db.Uuid
  section             Section       @relation(fields: [sectionId], references: [id])
  subject             Subject       @relation(fields: [subjectId], references: [id])
  teacher             TeachingStaff @relation(fields: [teachingStaffUserId], references: [userId])

  @@unique([sectionId, subjectId])
}

model Timetable {
  id        String   @id @default(uuid()) @db.Uuid
  sectionId Int
  day       String
  period    Int
  subject   String
  teacher   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  section   Section  @relation(fields: [sectionId], references: [id])
}

model Document {
  id          Int          @id @default(autoincrement())
  userId      String       @db.Uuid
  title       String
  description String?
  fileUrl     String
  type        DocumentType @default(OTHER)
  isPublic    Boolean      @default(false)
  uploadedAt  DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model Subject {
  id                    Int                     @id @default(autoincrement())
  subjectName           String
  subjectCode           String?
  classId               Int
  departmentId          Int
  examResults           ExamResult[]
  homework              Homework[]
  SectionSubjectTeacher SectionSubjectTeacher[]
  class                 Class                   @relation(fields: [classId], references: [id])
  department            Department              @relation(fields: [departmentId], references: [id])
  Teacher               TeachingStaff[]         @relation("SubjectToTeachingStaff")

  @@index([classId])
  @@index([departmentId])
}

model Department {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  NonTeachingStaff NonTeachingStaff[]
  subjects         Subject[]
  teachers         TeachingStaff[]
}

model Homework {
  id                 Int                  @id @default(autoincrement())
  classId            Int
  subjectId          Int
  teacherId          String               @db.Uuid
  class              Class                @relation(fields: [classId], references: [id])
  subject            Subject              @relation(fields: [subjectId], references: [id])
  teacher            TeachingStaff        @relation(fields: [teacherId], references: [userId])
  HomeworkSubmission HomeworkSubmission[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Exam {
  id         Int          @id @default(autoincrement())
  schoolId   String       @db.Uuid
  title      String
  createdAt  DateTime     @default(now())
  school     School       @relation(fields: [schoolId], references: [id])
  results    ExamResult[]
  examSeries ExamSeries[]
  AdmitCard  AdmitCard[]

  @@index([schoolId])
}

model ExamResult {
  id        Int     @id @default(autoincrement())
  examId    Int
  studentId String  @db.Uuid
  subjectId Int
  exam      Exam    @relation(fields: [examId], references: [id])
  student   Student @relation(fields: [studentId], references: [userId])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([examId, studentId, subjectId])
  @@index([examId])
  @@index([studentId])
  @@index([subjectId])
}

model AcademicYear {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean            @default(false)
  createdAt        DateTime           @default(now())
  schoolId         String             @db.Uuid
  school           School             @relation(fields: [schoolId], references: [id])
  classes          Class[]
  FeePayments      FeePayment[]
  FeeStructures    FeeStructure[]
  NonTeachingStaff NonTeachingStaff[]
  students         Student[]
  Syllabus         Syllabus[]
  TeachingStaff    TeachingStaff[]
  DigitalIdCard    DigitalIdCard[]

  @@unique([schoolId, name])
  @@index([schoolId])
}

model FeeStructure {
  id                  String                @id @default(uuid()) @db.Uuid
  schoolId            String?               @db.Uuid
  academicYearId      String                @db.Uuid
  issueDate           DateTime              @default(now())
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  studentUserId       String?               @db.Uuid
  classId             Int?
  mode                FeeMode               @default(MONTHLY)
  isInstallment       Boolean               @default(false)
  feeParticulars      FeeParticular[]
  FeePayments         FeePayment[]
  AcademicYear        AcademicYear          @relation(fields: [academicYearId], references: [id])
  Class               Class?                @relation(fields: [classId], references: [id])
  School              School?               @relation(fields: [schoolId], references: [id])
  Student             Student?              @relation(fields: [studentUserId], references: [userId])
  StudentFeeStructure StudentFeeStructure[]
}

model FeeParticular {
  id                   String                 @id @default(uuid()) @db.Uuid
  feeStructureId       String                 @db.Uuid
  name                 String
  defaultAmount        Float
  feeStructure         FeeStructure           @relation(fields: [feeStructureId], references: [id])
  StudentFeeParticular StudentFeeParticular[]
}

model StudentFeeStructure {
  id             String                 @id @default(uuid()) @db.Uuid
  studentId      String                 @db.Uuid
  academicYearId String                 @db.Uuid
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
  schoolId       String?                @db.Uuid
  studentUserId  String?                @db.Uuid
  feeStructureId String                 @db.Uuid
  status         String                 @default("UNPAID")
  FeePayments    FeePayment[]
  feeParticulars StudentFeeParticular[]
  feeStructure   FeeStructure           @relation(fields: [feeStructureId], references: [id])
  School         School?                @relation(fields: [schoolId], references: [id])
  Student        Student?               @relation(fields: [studentUserId], references: [userId])
}

model StudentFeeParticular {
  id                    String                  @id @default(uuid()) @db.Uuid
  studentFeeStructureId String                  @db.Uuid
  globalParticularId    String                  @db.Uuid
  amount                Float?
  StudentFeeInstallment StudentFeeInstallment[]
  globalParticular      FeeParticular           @relation(fields: [globalParticularId], references: [id])
  studentFeeStructure   StudentFeeStructure     @relation(fields: [studentFeeStructureId], references: [id])
}

model FeePayment {
  id                    String               @id @default(uuid()) @db.Uuid
  schoolId              String               @db.Uuid
  academicYearId        String               @db.Uuid
  studentId             String               @db.Uuid
  feeStructureId        String?              @db.Uuid
  studentFeeStructureId String?              @db.Uuid
  amount                Float
  paymentDate           DateTime             @default(now())
  paymentMode           String
  academicYear          AcademicYear         @relation(fields: [academicYearId], references: [id])
  feeStructure          FeeStructure?        @relation(fields: [feeStructureId], references: [id])
  school                School               @relation(fields: [schoolId], references: [id])
  studentFeeStructure   StudentFeeStructure? @relation(fields: [studentFeeStructureId], references: [id])
  student               Student              @relation(fields: [studentId], references: [userId])

  @@index([schoolId])
  @@index([academicYearId])
  @@index([studentId])
  @@index([feeStructureId])
  @@index([studentFeeStructureId])
}

model StudentFeeInstallment {
  id                     String               @id @default(uuid()) @db.Uuid
  studentFeeParticularId String               @db.Uuid
  dueDate                DateTime
  amount                 Float
  status                 String               @default("UNPAID")
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt
  studentFeeParticular   StudentFeeParticular @relation(fields: [studentFeeParticularId], references: [id])

  @@index([studentFeeParticularId])
}

model Attendance {
  id     Int              @id @default(autoincrement())
  userId String           @db.Uuid
  date   DateTime
  status AttendanceStatus
  user   User             @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  message    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  sender     User     @relation("Sender", fields: [senderId], references: [id])

  @@index([receiverId])
  @@index([senderId])
}

model LibraryBook {
  schoolId     String    @db.Uuid
  title        String
  author       String
  ISBN         String
  category     String
  createdAt    DateTime  @default(now())
  dueAt        DateTime?
  edition      String?
  fineAmount   Float?
  issuedAt     DateTime?
  issuedToId   String?   @db.Uuid
  publisher    String
  reservedAt   DateTime?
  reservedById String?   @db.Uuid
  status       String
  updatedAt    DateTime  @updatedAt
  id           String    @id @default(uuid()) @db.Uuid
  issuedTo     User?     @relation("IssuedBooks", fields: [issuedToId], references: [id])
  reservedBy   User?     @relation("ReservedBooks", fields: [reservedById], references: [id])
  school       School    @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@index([status])
  @@index([ISBN])
}

model Upload {
  id        String   @id @default(uuid())
  userId    String?
  fileUrl   String
  fileName  String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  School    School?  @relation(fields: [schoolId], references: [id])
  schoolId  String?  @db.Uuid
}

model Gallery {
  id       Int    @id @default(autoincrement())
  schoolId String @db.Uuid
  title    String
  school   School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

// certificates generation models

model CertificateTemplate {
  id           String                 @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  type         String // e.g. "character", "bonafide", "transfer", etc.
  schoolId     String                 @db.Uuid
  school       School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  layoutConfig Json // Stores positions, fonts, colors, placeholders
  createdById  String?                @db.Uuid
  createdBy    User?                  @relation(fields: [createdById], references: [id])
  isDefault    Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  certificates CertificateGenerated[]

  @@index([schoolId])
  @@index([type])
}

model CertificateGenerated {
  id                String              @id @default(uuid()) @db.Uuid
  certificateNumber String              @unique
  templateId        String              @db.Uuid
  template          CertificateTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  studentId         String              @db.Uuid
  student           Student             @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  schoolId          String              @db.Uuid
  school            School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  issuedById        String?             @db.Uuid
  issuedBy          User?               @relation(fields: [issuedById], references: [id])
  issueDate         DateTime            @default(now())
  customFields      Json // Additional dynamic values like event name, remarks, etc.
  fileUrl           String? // If PDF is stored
  status            String              @default("issued") // issued, pending, revoked
  createdAt         DateTime            @default(now())

  @@index([schoolId])
  @@index([studentId])
  @@index([templateId])
  @@index([status])
}

model DigitalIdCard {
  id             String        @id @default(uuid()) @db.Uuid
  studentId      String        @db.Uuid
  student        Student       @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  schoolId       String        @db.Uuid
  school         School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYearId String?       @db.Uuid
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  qrCodeUrl      String?
  layoutConfig   Json
  generatedAt    DateTime      @default(now())

  @@index([schoolId])
  @@index([studentId])
}

model AdmitCard {
  id           String   @id @default(uuid()) @db.Uuid
  studentId    String   @db.Uuid
  student      Student  @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  examId       Int
  exam         Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  schoolId     String   @db.Uuid
  school       School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  seatNumber   String
  center       String?
  layoutConfig Json
  issueDate    DateTime @default(now())

  @@index([schoolId])
  @@index([studentId])
  @@index([examId])
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    String?     @db.Uuid
  action    AuditAction
  tableName String
  rowId     String
  timestamp DateTime    @default(now())
  oldData   Json?
  newData   Json?
  error     String?
  user      User?       @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  ERROR
}

enum FeeStatus {
  PAID
  UNPAID
  PENDING
  PARTIAL
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LEFT
  DISABLED
  BANNED
}

enum DocumentType {
  NOTE
  ASSIGNMENT
  CERTIFICATE
  REPORT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HOLIDAY
}

enum FeeMode {
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
}

enum Audience {
  ALL
  STUDENTS
  TEACHERS
  PARENTS
  CLASS
  SECTION
}

enum Priority {
  NORMAL
  IMPORTANT
  URGENT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum StageName {
  REVIEW
  TEST_INTERVIEW
  OFFER
  ENROLLED
  REJECTED
}
