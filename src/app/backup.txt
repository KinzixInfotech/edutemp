generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // adjust if you're using another DB
  url      = env("DIRECT_URL")
}

model School {
  id               Int           @id @default(autoincrement())
  name             String
  domain           String        @unique // required for identifying tenant via domain
  profilePicture   String
  location         String
  SubscriptionType String
  Language         String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime? // Soft delete
  classes          Class[]
  users            User[]
  admins           Admin[]
  transport        Transport[]
  libraryBooks     LibraryBook[]
  galleries        Gallery[]
  exams            Exam[]
  Student          Student[]

  @@index([name])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id        Int       @id @default(autoincrement())
  schoolId  Int
  roleId    Int
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  school                School            @relation(fields: [schoolId], references: [id])
  role                  Role              @relation(fields: [roleId], references: [id])
  student               Student?
  teacher               Teacher?
  nonTeachingStaff      NonTeachingStaff?
  attendance            Attendance[]
  sentNotifications     Notification[]    @relation("Sender")
  receivedNotifications Notification[]    @relation("Receiver")
  Document              Document[]
  AuditLog              AuditLog[]
  // admin                 Admin?
  adminUserId           String?
  Admin                 Admin[]

  @@index([schoolId])
  @@index([roleId])
}

model Admin {
  userId   Int @id // make sure it's Int, not String
  schoolId Int

  school School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Student {
  userId        Int     @id
  classId       Int
  parentId      Int?
  name          String
  email         String
  dob           String
  gender        String
  admissionDate String
  schoolId      Int
  school        School  @relation(fields: [schoolId], references: [id])
  sectionId     Int
  section       Section @relation(fields: [sectionId], references: [id])

  bloodGroup         String
  rollNumber         String
  academicYear       String
  PreviousSchoolName String?
  Status             StudentStatus
  FeeStatus          FeeStatus     @default(PENDING)
  DateOfLeaving      String?
  contactNumber      String
  Address            String
  city               String
  state              String
  country            String
  postalCode         String
  FatherName         String
  MotherName         String
  FatherNumber       String?
  MotherNumber       String?
  GuardianName       String?
  GuardianRelation   String?
  House              String?
  profilePicture     String
  admissionNo        String
  user               User          @relation(fields: [userId], references: [id])
  class              Class         @relation(fields: [classId], references: [id])

  // fees        Fee[]
  examResults        ExamResult[]
  // Section     Section?     @relation(fields: [sectionId], references: [id])
  ExamIssue          ExamIssue[]
  HomeworkSubmission HomeworkSubmission[]
  FeeStructure       FeeStructure[]
  FeePayment         FeePayment[]

  @@index([classId])
  @@index([sectionId])
  @@index([parentId])
}

model ExamSeries {
  id     Int   @id @default(autoincrement())
  examId Int
  score  Float
  exam   Exam  @relation(fields: [examId], references: [id])
}

model ExamIssue {
  id        Int      @id @default(autoincrement())
  studentId Int
  issueDate DateTime
  student   Student  @relation(fields: [studentId], references: [userId])
}

model Vehicle {
  id     Int         @id @default(autoincrement())
  number String
  routes Transport[]
}

model HomeworkSubmission {
  id             Int      @id @default(autoincrement())
  homeworkId     Int
  studentId      Int
  submissionDate DateTime

  homework Homework @relation(fields: [homeworkId], references: [id])
  student  Student  @relation(fields: [studentId], references: [userId])
}

model Teacher {
  userId       Int @id
  departmentId Int

  employeeId     String
  profilePicture String
  name           String
  designation    String
  // subject        Subject          @relation(fields: [subjectId], references: [id])
  gender         String
  age            String
  bloodGroup     String
  contactNumber  String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?

  subjects      Subject[] // inverse relation
  user          User             @relation(fields: [userId], references: [id])
  department    Department       @relation(fields: [departmentId], references: [id])
  homework      Homework[]
  subjectId     Int
  sections      SectionTeacher[]
  classTeachers ClassTeacher[] // <-- NEW

  @@index([departmentId])
}

model NonTeachingStaff {
  userId       Int @id
  departmentId Int

  employeeId     String
  profilePicture String
  name           String
  designation    String
  gender         String
  age            String
  bloodGroup     String
  contactNumber  String
  email          String
  address        String
  City           String
  district       String?
  state          String?
  country        String?
  PostalCode     String?

  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  // homework   Homework[]

  @@index([departmentId])
}

model Class {
  id        Int    @id @default(autoincrement())
  schoolId  Int
  className String

  school       School         @relation(fields: [schoolId], references: [id])
  students     Student[]
  subjects     Subject[]
  homework     Homework[]
  Section      Section[]
  FeeStructure FeeStructure[]
  ClassTeacher ClassTeacher[]

  @@unique([schoolId, className])
  @@index([schoolId])
}

model Section {
  id              Int              @id @default(autoincrement())
  name            String // e.g. "A", "B"
  classId         Int
  assignedTeacher SectionTeacher[] // many-to-many
  students        Student[]

  class Class @relation(fields: [classId], references: [id])

  @@unique([classId, name]) // Prevent duplicate section names in same class
  @@index([classId])
}

model SectionTeacher {
  id        Int @id @default(autoincrement())
  sectionId Int
  teacherId Int

  section Section @relation(fields: [sectionId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [userId])

  @@unique([sectionId, teacherId])
  @@index([sectionId])
  @@index([teacherId])
}

model ClassTeacher {
  id        Int @id @default(autoincrement())
  classId   Int
  teacherId Int

  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [userId])

  @@unique([classId, teacherId])
  @@index([classId])
  @@index([teacherId])
}

model Document {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  fileUrl     String
  type        DocumentType @default(OTHER)
  isPublic    Boolean      @default(false)
  uploadedAt  DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model Subject {
  id           Int     @id @default(autoincrement())
  subjectName  String
  subjectCode  String?
  classId      Int
  departmentId Int

  class      Class      @relation(fields: [classId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  homework    Homework[]
  examResults ExamResult[]
  Teacher     Teacher[]

  @@index([classId])
  @@index([departmentId])
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  teachers         Teacher[]
  subjects         Subject[]
  NonTeachingStaff NonTeachingStaff[]
}

model Homework {
  id        Int @id @default(autoincrement())
  classId   Int
  subjectId Int
  teacherId Int

  class              Class                @relation(fields: [classId], references: [id])
  subject            Subject              @relation(fields: [subjectId], references: [id])
  teacher            Teacher              @relation(fields: [teacherId], references: [userId])
  HomeworkSubmission HomeworkSubmission[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  schoolId  Int
  title     String
  createdAt DateTime @default(now())

  school     School       @relation(fields: [schoolId], references: [id])
  results    ExamResult[]
  examSeries ExamSeries[]

  @@index([schoolId])
}

model ExamResult {
  id        Int @id @default(autoincrement())
  examId    Int
  studentId Int
  subjectId Int

  exam    Exam    @relation(fields: [examId], references: [id])
  student Student @relation(fields: [studentId], references: [userId])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([examId, studentId, subjectId])
  @@index([examId])
  @@index([studentId])
  @@index([subjectId])
}

model FeeStructure {
  id        Int      @id @default(autoincrement())
  classId   Int
  studentId Int
  issueDate DateTime

  class    Class        @relation(fields: [classId], references: [id])
  student  Student      @relation(fields: [studentId], references: [userId])
  payments FeePayment[]
}

model FeePayment {
  id          Int      @id @default(autoincrement())
  studentId   Int
  structureId Int
  amount      Float
  paymentDate DateTime

  student   Student      @relation(fields: [studentId], references: [userId])
  structure FeeStructure @relation(fields: [structureId], references: [id])
}

model Attendance {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime
  status String

  user User @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  message    String
  createdAt  DateTime @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  @@index([receiverId])
  @@index([senderId])
}

model Transport {
  id       Int     @id @default(autoincrement())
  schoolId Int
  route    String?

  school    School   @relation(fields: [schoolId], references: [id])
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?

  @@index([schoolId])
}

model LibraryBook {
  id       Int     @id @default(autoincrement())
  schoolId Int
  title    String
  author   String?

  school School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model Gallery {
  id       Int    @id @default(autoincrement())
  schoolId Int
  title    String

  school School @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    Int?
  action    AuditAction
  tableName String
  rowId     Int // ID of the row affected
  timestamp DateTime    @default(now())
  oldData   Json? // before change
  newData   Json? // after change
  error     String?

  user User? @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  ERROR
}

enum FeeStatus {
  PAID
  UNPAID
  PENDING
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  LEFT
}

enum DocumentType {
  NOTE
  ASSIGNMENT
  CERTIFICATE
  REPORT
  OTHER
}
